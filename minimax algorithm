import math

# Define the board size
BOARD_SIZE = 3

def print_board(board):
    print("---------")
    for row in board:
        print("| " + " | ".join(row) + " |")
        print("---------")

def check_win(board, player):
    # Check rows, columns and diagonals
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(BOARD_SIZE):
        if all([board[row][col] == player for row in range(BOARD_SIZE)]):
            return True

    if all([board[i][i] == player for i in range(BOARD_SIZE)]):
        return True

    if all([board[i][BOARD_SIZE - 1 - i] == player for i in range(BOARD_SIZE)]):
        return True

    return False

def check_draw(board):
    return all([cell in ['X', 'O'] for row in board for cell in row])

def minimax(board, depth, is_maximizing):
    if check_win(board, 'X'):
        return 10 - depth
    if check_win(board, 'O'):
        return depth - 10
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    score = minimax(board, depth + 1, False)
                    board[row][col] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    score = minimax(board, depth + 1, True)
                    board[row][col] = ' '
                    best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = (-1, -1)
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            if board[row][col] == ' ':
                board[row][col] = 'X'
                score = minimax(board, 0, False)
                board[row][col] = ' '
                if score > best_score:
                    best_score = score
                    move = (row, col)
    return move

def make_move(board, row, col, player):
    if board[row][col] == ' ':
        board[row][col] = player
        return True
    return False

def main():
    board = [[' ' for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]
    players = ['X', 'O']
    turn = 0

    while True:
        print_board(board)
        if turn % 2 == 0:
            # Player X's turn (AI)
            print("Player X's turn.")
            row, col = best_move(board)
        else:
            # Player O's turn (Human)
            print("Player O's turn.")
            try:
                row = int(input("Enter row (0, 1, 2): "))
                col = int(input("Enter column (0, 1, 2): "))
                
                if row not in range(BOARD_SIZE) or col not in range(BOARD_SIZE):
                    print("Invalid input. Please enter row and column between 0 and 2.")
                    continue
                
                if not make_move(board, row, col, 'O'):
                    print("Cell is already occupied. Try again.")
                    continue
            except ValueError:
                print("Invalid input. Please enter numeric values for row and column.")
                continue
        
        if not turn % 2 == 0:
            if make_move(board, row, col, 'X'):
                if check_win(board, 'X'):
                    print_board(board)
                    print("Player X wins!")
                    break
                elif check_draw(board):
                    print_board(board)
                    print("The game is a draw.")
                    break
                turn += 1
        else:
            if check_win(board, 'O'):
                print_board(board)
                print("Player O wins!")
                break
            elif check_draw(board):
                print_board(board)
                print("The game is a draw.")
                break
            turn += 1
    
if __name__ == "__main__":
    main()
