import itertools

def is_valid_solution(permutation, letters):
    # Create a dictionary mapping letters to digits
    mapping = {letter: digit for letter, digit in zip(letters, permutation)}
    
    # Construct the numbers from the mapped digits
    send = 1000 * mapping['S'] + 100 * mapping['E'] + 10 * mapping['N'] + mapping['D']
    more = 1000 * mapping['M'] + 100 * mapping['O'] + 10 * mapping['R'] + mapping['E']
    money = 10000 * mapping['M'] + 1000 * mapping['O'] + 100 * mapping['N'] + 10 * mapping['E'] + mapping['Y']
    
    return send + more == money

def solve_crypt_arithmetic():
    letters = 'SENDMORY'
    digits = range(10)
    
    # Generate all permutations of the digits of length equal to the number of unique letters
    for permutation in itertools.permutations(digits, len(letters)):
        if is_valid_solution(permutation, letters):
            # If a valid solution is found, print it
            mapping = {letter: digit for letter, digit in zip(letters, permutation)}
            print("Solution found:")
            for letter in letters:
                print(f"{letter} = {mapping[letter]}")
            break
    else:
        print("No solution found.")

solve_crypt_arithmetic()
