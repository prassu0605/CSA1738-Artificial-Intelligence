from heapq import heappop, heappush

class PuzzleState:
    def __init__(self, board, goal, parent=None, move=0, depth=0):
        self.board = board
        self.goal = goal
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.depth + self.manhattan()

    def __lt__(self, other):
        return self.cost < other.cost

    def manhattan(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

    def get_neighbors(self):
        neighbors = []
        x, y = self.find_blank()
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[new_x][new_y] = new_board[new_x][new_y], new_board[x][y]
                neighbors.append(PuzzleState(new_board, self.goal, self, (new_x, new_y), self.depth + 1))

        return neighbors

    def is_goal(self):
        return self.board == self.goal

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.board]) + '\n'

def solve_puzzle(start, goal):
    open_set = []
    closed_set = set()
    start_state = PuzzleState(start, goal)
    heappush(open_set, start_state)

    while open_set:
        current_state = heappop(open_set)

        if current_state.is_goal():
            return reconstruct_path(current_state)

        closed_set.add(str(current_state.board))

        for neighbor in current_state.get_neighbors():
            if str(neighbor.board) not in closed_set:
                heappush(open_set, neighbor)

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state)
        state = state.parent
    return path[::-1]

def print_path(path):
    for step in path:
        print(step)

start = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

goal = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

path = solve_puzzle(start, goal)

if path:
    print("Solution found:")
    print_path(path)
else:
    print("No solution found.")
