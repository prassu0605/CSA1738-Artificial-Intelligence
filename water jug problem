from collections import deque

def is_valid_state(state, max_jug1, max_jug2):
    return 0 <= state[0] <= max_jug1 and 0 <= state[1] <= max_jug2

def get_next_states(state, max_jug1, max_jug2):
    jug1, jug2 = state
    return [
        (max_jug1, jug2),  # Fill jug1
        (jug1, max_jug2),  # Fill jug2
        (0, jug2),         # Empty jug1
        (jug1, 0),         # Empty jug2
        (jug1 - min(jug1, max_jug2 - jug2), jug2 + min(jug1, max_jug2 - jug2)),  # Pour jug1 to jug2
        (jug1 + min(jug2, max_jug1 - jug1), jug2 - min(jug2, max_jug1 - jug1))   # Pour jug2 to jug1
    ]

def bfs_water_jug(start, goal, max_jug1, max_jug2):
    queue = deque([start])
    visited = set([start])
    parent = {start: None}
    
    while queue:
        current_state = queue.popleft()
        
        if current_state == goal:
            return reconstruct_path(parent, current_state)
        
        for next_state in get_next_states(current_state, max_jug1, max_jug2):
            if is_valid_state(next_state, max_jug1, max_jug2) and next_state not in visited:
                queue.append(next_state)
                visited.add(next_state)
                parent[next_state] = current_state

    return None

def reconstruct_path(parent, state):
    path = []
    while state:
        path.append(state)
        state = parent[state]
    return path[::-1]

def print_path(path):
    for step in path:
        print(f"Jug1: {step[0]}L, Jug2: {step[1]}L")

def solve_water_jug_problem(max_jug1, max_jug2, target):
    start = (0, 0)
    goal = (target, 0) if target <= max_jug1 else (0, target)
    
    path = bfs_water_jug(start, goal, max_jug1, max_jug2)
    
    if path:
        print("Solution found:")
        print_path(path)
    else:
        print("No solution found.")

# Example usage
max_jug1 = 3
max_jug2 = 5
target = 4

solve_water_jug_problem(max_jug1, max_jug2, target)
